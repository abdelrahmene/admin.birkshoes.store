// Script de test pour diagnostiquer l'API des collections
const { PrismaClient } = require('@prisma/client')

async function testCollectionAPI() {
  const prisma = new PrismaClient()
  
  try {
    console.log('üîç Test de connexion √† la base de donn√©es...')
    
    // Test 1: V√©rifier la connexion
    await prisma.$connect()
    console.log('‚úÖ Connexion √† la base de donn√©es r√©ussie')
    
    // Test 2: Lister toutes les collections
    console.log('\nüìã Liste des collections:')
    const collections = await prisma.collection.findMany({
      select: {
        id: true,
        name: true,
        slug: true,
        categoryId: true
      }
    })
    console.log('Collections trouv√©es:', collections.length)
    collections.forEach(c => console.log(`  - ${c.id}: ${c.name} (category: ${c.categoryId || 'none'})`))
    
    if (collections.length > 0) {
      const testId = collections[0].id
      console.log(`\nüîç Test de r√©cup√©ration de la collection ${testId}...`)
      
      // Test 3: R√©cup√©rer une collection sp√©cifique avec relations
      try {
        const collection = await prisma.collection.findUnique({
          where: {
            id: testId
          },
          include: {
            category: {
              select: {
                id: true,
                name: true,
                slug: true
              }
            },
            products: {
              select: {
                id: true,
                name: true,
                slug: true,
                price: true,
                images: true,
                isActive: true
              }
            },
            _count: {
              select: {
                products: true
              }
            }
          }
        })
        
        if (collection) {
          console.log('‚úÖ Collection r√©cup√©r√©e avec succ√®s:')
          console.log('  - Nom:', collection.name)
          console.log('  - Cat√©gorie:', collection.category?.name || 'Aucune')
          console.log('  - Nombre de produits:', collection._count.products)
          console.log('  - Produits:', collection.products.length)
        } else {
          console.log('‚ùå Collection non trouv√©e')
        }
      } catch (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration de la collection:', error.message)
        console.error('Code d\'erreur:', error.code)
        console.error('Stack:', error.stack)
      }
    }
    
    // Test 4: V√©rifier la structure de la table collections
    console.log('\nüìä V√©rification de la structure de la table collections...')
    const tableInfo = await prisma.$queryRaw`DESCRIBE collections`
    console.log('Colonnes de la table collections:')
    console.table(tableInfo)
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message)
    console.error('Code:', error.code)
    console.error('Stack:', error.stack)
  } finally {
    await prisma.$disconnect()
  }
}

testCollectionAPI().catch(console.error)
