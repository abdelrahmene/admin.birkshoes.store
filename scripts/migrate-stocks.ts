import { prisma } from '@/lib/prisma'
import { recalculateProductStock } from '@/lib/stock-utils'

/**
 * Script de migration pour corriger la logique des stocks
 * Ex√©cuter une seule fois apr√®s le d√©ploiement
 */
async function migrateStocks() {
  console.log('üöÄ D√©but de la migration des stocks...')
  
  try {
    // R√©cup√©rer tous les produits avec leurs variantes
    const products = await prisma.product.findMany({
      include: {
        variants: {
          select: { id: true, stock: true }
        }
      }
    })

    console.log(`üì¶ ${products.length} produits trouv√©s`)

    let updatedProducts = 0
    let productsWithVariants = 0
    let productsWithoutVariants = 0

    for (const product of products) {
      if (product.variants.length > 0) {
        // Produit avec variantes : stock principal = 0
        const variantsTotalStock = product.variants.reduce((sum, v) => sum + v.stock, 0)
        
        if (product.stock !== 0) {
          await prisma.product.update({
            where: { id: product.id },
            data: { stock: 0 }
          })
          updatedProducts++
          console.log(`‚úÖ ${product.name}: stock ${product.stock} ‚Üí 0 (variantes: ${variantsTotalStock})`)
        }
        
        productsWithVariants++
      } else {
        // Produit sans variantes : garder le stock principal
        productsWithoutVariants++
        console.log(`‚ÑπÔ∏è  ${product.name}: stock ${product.stock} (pas de variantes)`)
      }
    }

    console.log(`\nüìä R√âSULTATS:`)
    console.log(`   ‚Ä¢ Produits avec variantes: ${productsWithVariants}`)
    console.log(`   ‚Ä¢ Produits sans variantes: ${productsWithoutVariants}`)
    console.log(`   ‚Ä¢ Produits mis √† jour: ${updatedProducts}`)
    console.log(`\n‚úÖ Migration termin√©e avec succ√®s !`)
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// Ex√©cuter la migration si ce fichier est appel√© directement
if (require.main === module) {
  migrateStocks().catch(console.error)
}

export { migrateStocks }